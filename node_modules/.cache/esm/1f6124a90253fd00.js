let Post,User,cloudinary;_025‍.x([["createPost",()=>createPost],["uploadImage",()=>uploadImage],["postsByUser",()=>postsByUser],["userPost",()=>userPost],["updatePost",()=>updatePost],["deletePost",()=>deletePost],["newsFeed",()=>newsFeed],["likePost",()=>likePost],["unlikePost",()=>unlikePost],["addComment",()=>addComment],["removeComment",()=>removeComment],["totalPosts",()=>totalPosts],["posts",()=>posts],["getPost",()=>getPost]]);_025‍.w("../models/post",[["default",["Post"],function(v){Post=v}]]);_025‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_025‍.w("cloudinary",[["default",["cloudinary"],function(v){cloudinary=v}]]);



cloudinary.config({
  cloud_name: process.env.CLOUDINARY_NAME,
  api_key: process.env.CLOUDINARY_KEY,
  api_secret: process.env.CLOUDINARY_SECRET,
});

       const createPost = async (req, res) => {
  //console.log("post =>", req.body);
  const { content, image } = req.body;
  if (!content.length) {
    return res.json({
      error: "Content is required",
    });
  }
  try {
    const post = new Post({ content, image, postedBy: req.user._id });
    await post.save();

    const postWithUser = await Post.findById(post._id).populate(
      "postedBy",
      "-password -secret"
    );

    res.json(postWithUser);
  } catch (err) {
    _025‍.g.console.log(err);
    res.sendStatus(400);
  }
};

       const uploadImage = async (req, res) => {
  //console.log("request", req.files);
  try {
    const result = await cloudinary.uploader.upload(req.files.image.path);
    //console.log("uploaded img url", result);
    res.json({
      url: result.secure_url,
      public_id: result.public_id,
    });
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const postsByUser = async (req, res) => {
  try {
    //const posts = await Post.find({ postedBy: req.user._id })
    const posts = await Post.find()
      .populate("postedBy", "_id name image")
      .limit(10)
      .sort({ createdAt: -1 });
    //console.log('post',posts)
    res.json(posts);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const userPost = async (req, res) => {
  try {
    const post = await Post.findById(req.params._id)
      .populate("postedBy", "_id name image")
      .populate("comments.postedBy", "_id name image");

    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const updatePost = async (req, res) => {
  try {
    const post = await Post.findByIdAndUpdate(req.params._id, req.body, {
      new: true,
    });
    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const deletePost = async (req, res) => {
  try {
    const post = await Post.findByIdAndDelete(req.params._id);
    if (post.image && post.image.public_id) {
      const image = await cloudinary.uploader.destroy(post.image.public_id);
    }
    res.json({ ok: true });
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const newsFeed = async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    let following = user.following;
    following.push(req.user._id);
    // pagination
    const currentPage = req.params.page || 1;
    const perPage = 3;

    const posts = await Post.find({ postedBy: { $in: following } })
      .skip((currentPage - 1) * perPage)
      .populate("postedBy", "_id name image")
      .populate("comments.postedBy", "_id name image")
      .sort({ createdAt: -1 })
      .limit(perPage);

    res.json(posts);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const likePost = async (req, res) => {
  try {
    const post = await Post.findByIdAndUpdate(
      req.body._id,
      {
        $addToSet: { likes: req.user._id },
      },
      { new: true }
    );
    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const unlikePost = async (req, res) => {
  try {
    const post = await Post.findByIdAndUpdate(
      req.body._id,
      {
        $pull: { likes: req.user._id },
      },
      { new: true }
    );
    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const addComment = async (req, res) => {
  try {
    const { postId, comment } = req.body;
    const post = await Post.findByIdAndUpdate(
      postId,
      {
        $push: { comments: { text: comment, postedBy: req.user._id } },
      },
      { new: true }
    )
      .populate("postedBy", "_id name image")
      .populate("comments.postedBy", "_id name image");
    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const removeComment = async (req, res) => {
  try {
    const { postId, comment } = req.body;
    const post = await Post.findByIdAndUpdate(
      postId,
      {
        $pull: { comments: { _id: comment._id } },
      },
      { new: true }
    );

    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const totalPosts = async (req, res) => {
  try {
    const total = await Post.find().estimatedDocumentCount();
    res.json(total);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const posts = async (req, res) => {
  try {
    const posts = await Post.find()
      .populate("postedBy", "_id name image")
      .populate("comments.postedBy", "_id name image")
      .sort({ createdAt: -1 })
      .limit(12);
    res.json(posts);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};

       const getPost = async (req, res) => {
  try {
    const post = await Post.findById(req.params._id)
      .populate("postedBy", "_id name image")
      .populate("comments.postedBy", "_id name image");

    res.json(post);
  } catch (err) {
    _025‍.g.console.log(err);
  }
};
